<?php
/**
 * @file
 * Defines Widget filter.
 */

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function wysiwyg_widget_ctools_plugin_api($owner, $api) {
  if ($owner == 'wysiwyg_widget' && $api == 'default_wysiwyg_widget') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Telling CTools that we want to define an 'export_ui' plugin.
 */
function wysiwyg_widget_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function wysiwyg_widget_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return $type;
  }
}

/**
 * Implements hook_filter_info().
 */
function wysiwyg_widget_filter_info() {
  return array(
    'widget_embed' => array(
      'title' => t('Widget embed'),
      'process callback' => '_wysiwyg_widget_embed_filter',
      // Needs to be after any filter that limits html tags.
      'weight' => 50,
    )
  );
}

/**
 * Callback for hook_filter_info().
 */
function _wysiwyg_widget_embed_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
  return preg_replace_callback(
    '|<!--widget_embed:(.*?)-->|si',
    function ($matches) {
      return rawurldecode(($matches[1]));
    },
    $text
  );
}

/**
 * Implements hook_menu().
 */
function wysiwyg_widget_menu() {
  $items = array();

  $items['admin/structure/wysiwyg_widget/settings'] = array(
    'title' => t('Settings'),
    'description' => t('Configure settings for Wysiwyg Widget.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_widget_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Page callback for Wysiwyg Widget settings form.
 */
function wysiwyg_widget_settings($form, &$form_state) {
  $form = array();
  $form['wysiwyg_widget_xss_header'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send X-XSS-Protection header'),
    '#default_value' => variable_get('wysiwyg_widget_xss_header', 0),
    '#description' => t('When checked, the X-XSS-Protection header will be sent to prevent the "err_blocked_by_xss_auditor" error on Chrome.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * Send X-XSS-Protection header to avoid the "err_blocked_by_xss_auditor"
 * error on Chrome.
 */
function wysiwyg_widget_wysiwyg_editor_settings_alter(&$settings, $context) {
  $set_XSS_header = variable_get('wysiwyg_widget_xss_header', 0);
  // Only send the header when the widget_embed plugin is present.
  if ($set_XSS_header == 1 && strpos($settings['plugins'], 'widget_embed') !== FALSE) {
    drupal_add_http_header('X-XSS-Protection', '0');
  }
}

/**
 * Load function.
 *
 * @param string $machinename
 *
 * @return object
 */
function wysiwyg_widget_load($machinename) {

  ctools_include('export');

  $sets = &drupal_static(__FUNCTION__, array());

  if (!isset($sets[$machinename])) {
    // Load the set.
    $result = ctools_export_load_object('wysiwyg_widgets', 'names', array($machinename));
    if (isset($result[$machinename])) {
      $set = $result[$machinename];
    }
    else {
      return NULL;
    }

    // Store the original set. This is used by the set edit form.
    $set->raw = clone $set;

    // Allow modules to alter the raw set object.
    drupal_alter('wysiwyg_widget_load', $set);

    // Configure this set based on the defined settings.
    $set->wrapper_id = 'wysiwyg-widget-' . $set->machinename . '-wrapper';
    $set->placeholder_id = 'wysiwyg-widget-' . $set->machinename;

    // Allow modules to alter the fully-loaded set object.
    drupal_alter('wysiwyg_widget', $set);

    // Statically cache the fully loaded set.
    $sets[$machinename] = $set;
  }
  else {
    // Use the statically cached set object.
    $set = $sets[$machinename];
  }

  return $set;
}

/**
 * Load all widgets.
 *
 * @param boolean $include_disabled
 *
 * @return array of sets.
 */
function wysiwyg_widgets_load_all($include_disabled = FALSE) {
  ctools_include('export');

  $sets = ctools_export_crud_load_all('wysiwyg_widgets');
  foreach ($sets as $key => $set) {
    if (!$include_disabled && isset($set->disabled) && $set->disabled) {
      unset($sets[$key]);
    }
  }

  return $sets;
}

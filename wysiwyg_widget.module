<?php
/**
 * @file
 * Defines Widget filter.
 */

/**
 * Implementation of hook_ctools_plugin_api().
 */
function wysiwyg_widget_ctools_plugin_api($owner, $api) {
  if ($owner == 'wysiwyg_widget' && $api == 'default_wysiwyg_widget_set') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function wysiwyg_widget_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function wysiwyg_widget_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return $type;
  }
}

/**
 * Implements hook_filter_info().
 */
function wysiwyg_widget_filter_info() {
  return array(
    'widget_embed' => array(
      'title' => t('Widget embed'),
      'process callback' => '_wysiwyg_widget_embed_filter',
      // Needs to be after any filter that limits html tags.
      'weight' => 50,
    )
  );
}

/**
 * Callback for hook_filter_info().
 */
function _wysiwyg_widget_embed_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
  return preg_replace_callback(
    '|<!--widget_embed:(.*?)-->|si',
    function ($matches) {
      return rawurldecode(($matches[1]));
    },
    $text
  );
}

/**
 * Implements hook_menu().
 */
function wysiwyg_widget_menu() {
  $items = array();

  $items['admin/structure/wysiwyg_widget/settings'] = array(
    'title' => t('Settings'),
    'description' => t('Configure settings for Wysiwyg Widget.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_widget_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Page callback for Wysiwyg Widget settings form.
 */
function wysiwyg_widget_settings($form, &$form_state) {
  $form = array();
  $form['wysiwyg_widget_xss_header'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send X-XSS-Protection header'),
    '#default_value' => variable_get('wysiwyg_widget_xss_header', 0),
    '#description' => t('When checked, the X-XSS-Protection header will be sent to prevent the "err_blocked_by_xss_auditor" error on Chrome.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * Send X-XSS-Protection header to avoid the "err_blocked_by_xss_auditor"
 * error on Chrome.
 */
function wysiwyg_widget_wysiwyg_editor_settings_alter(&$settings, $context) {
  $set_XSS_header = variable_get('wysiwyg_widget_xss_header', 0);
  // Only send the header when the widget_embed plugin is present.
  if ($set_XSS_header == 1 && strpos($settings['plugins'], 'widget_embed') !== FALSE) {
    drupal_add_http_header('X-XSS-Protection', '0');
  }
}

/**
 * Return an array of all wysiwyg_widget.
 *
 * @param bool $reset
 *   If TRUE, reset the static cache forcing views to be reloaded.
 */
function wysiwyg_widget_get_all_placeholders($reset = FALSE) {
  ctools_include('export');

  return ctools_export_crud_load_all('wysiwyg_widget', $reset);
}

/**
 * Returns a machine name.
 *
 * @param $name The human readable name.
 *
 * @return String The machine name.
 */
function _wysiwyg_widget_machine_name($name) {
  return preg_replace('@[^a-z0-9-]+@', '_', strtolower($name));
}

/**
 * Writes the widget name on the placeholder image.
 *
 * @param $text The human readable name.
 *
 * @return $filename The generated image.
 */
function _wysiwyg_widget_generate_image($text) {
  $filename = sprintf('public://wysiwyg_widget_%s.png',
    _wysiwyg_widget_machine_name($text)
  );

  if (file_exists($filename)) {
    return $filename;
  }

  // Create image from png.
  $im = imagecreatefrompng(drupal_get_path('module', 'wysiwyg_widget') . '/plugins/widget_embed/images/widget.png');

  $font = realpath(drupal_get_path('module', 'wysiwyg_widget') . '/plugins/widget_embed/font.ttf');
  $font_size = 25;
  $image_width = imagesx($im);
  $image_height = imagesy($im);
  $shadow_color = imagecolorallocate($im, 0, 0, 150);
  $text_color = imagecolorallocate($im, 49, 128, 200);
  $angle = 0;

  // Get Bounding Box Size.
  $text_box = imagettfbbox($font_size, $angle, $font, $text);

  // Get Text Width and Height.
  $text_width = $text_box[2] - $text_box[0];
  $text_height = $text_box[7] - $text_box[1];

  // Calculate coordinates of the text.
  $x = ($image_width / 2) - ($text_width / 2);
  $y = ($image_height / 2) - ($text_height / 2);

  // Add some shadow to the text.
  imagettftext($im, $font_size, 0, $x + 1, $y + 1, $shadow_color, $font, $text);

  // Add the text.
  imagettftext($im, $font_size, 0, $x, $y, $text_color, $font, $text);

  imagejpeg($im, $filename);
  imagedestroy($im);

  return $filename;
}

/**
 * Implements template_preprocess_field().
 *
 * Adds external JS for widgets embedded in fields on the page.
 */
function wysiwyg_widget_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  if (isset($element['#items']) && is_array($element['#items'])) {
    foreach ($element['#items'] as $item) {
      if (!empty($item['safe_value']) && !empty($item['format'])) {
        foreach (wysiwyg_widget_get_external_js_placeholders() as $placeholder) {
          if (preg_match('/' . preg_quote($placeholder->pattern) . '/', $item['safe_value'])) {
            // Add Async attribute if enabled.
            $options = array();
            if (!empty($placeholder->external_js_async)) {
              $options = array('async' => 'async');
            }
            drupal_add_js($placeholder->external_js, $options);
          }
        }
      }
    }
  }
}

/**
 * Get placeholders that have external JS.
 *
 * @return array
 */
function wysiwyg_widget_get_external_js_placeholders() {
  // Statically cache the external JS placeholders.
  $js_placeholders = &drupal_static(__FUNCTION__);

  if (is_array($js_placeholders)) {
    return $js_placeholders;
  }

  $js_placeholders = array();

  $placeholders = wysiwyg_widget_get_all_placeholders();
  foreach ($placeholders as $placeholder) {
    if (!empty($placeholder->external_js)) {
      $js_placeholders[] = $placeholder;
    }
  }

  return $js_placeholders;
}
